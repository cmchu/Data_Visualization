within(df, Freq<-data.frame(do.call('rbind', strsplit(as.character(Freq), ':', fixed=TRUE))))
runApp('MSAN_module4/msan622/labs/lab-2')
names(df) <- c("Statistic", "Value")
df
df <- within(df, Freq<-data.frame(do.call('rbind', strsplit(as.character(Freq), ':', fixed=TRUE))))
df
names(df) <- c("Statistic", "Value")
names(df)
colnames(df)
df
str(df)
runApp('MSAN_module4/msan622/labs/lab-2')
df <- data.frame(summary(data)[,'Freq', drop=F]
q
df <- data.frame(summary(data))[,'Freq', drop=F]
df
str(df)
df <- within(df, data.frame(do.call('rbind', strsplit(as.character(Freq), ':', fixed=TRUE))))
str(df)
df
df <- data.frame(do.call('rbind', strsplit(as.character(Freq), ':', fixed=TRUE)))
df <- data.frame(do.call('rbind', strsplit(as.character(df$Freq), ':', fixed=TRUE)))
df
names(df) <- c("Statistic", "Value")
df
runApp('MSAN_module4/msan622/labs/lab-2')
shiny::runApp('MSAN_module4/msan622/labs/lab-2')
runApp('MSAN_module4/msan622/labs/lab-2')
median(c(1,2))
runApp('MSAN_module4/msan622/labs/lab-2')
runApp('MSAN_module4/msan622/labs/lab-2')
runApp('MSAN_module4/msan622/labs/lab-2')
runApp('MSAN_module4/msan622/labs/lab-2')
runApp('MSAN_module4/msan622/labs/lab-2')
runApp('MSAN_module4/msan622/labs/lab-2')
runApp('MSAN_module4/msan622/labs/lab-2')
runApp('MSAN_module4/msan622/labs/lab-2')
shiny::runApp('MSAN_module4/msan622/labs/lab-2')
?rexp
hist(rexp(10000, rate=0.0001))
hist(rexp(10000, rate=0.0001), xlim=c(0,100))
hist(rexp(10000, rate=0.0001), xlim=c(0,500))
hist(rexp(10000, rate=0.001), xlim=c(0,500))
hist(rexp(10000, rate=0.001), xlim=c(0,1000))
hist(rexp(10000, rate=0.001), xlim=c(0,1000), breaks = 100000)
hist(rexp(10000, rate=0.0001), xlim=c(0,1000), breaks = 100000)
hist(rexp(10000, rate=0.0001), xlim=c(0,1000), breaks = 1000)
hist(rexp(10000, rate=0.0001), xlim=c(0,1000), breaks = 1000)
hist(rexp(10000, rate=0.001), xlim=c(0,1000), breaks = 1000)
?rgeom
bar(regeom(100, prob=1/100))
barplot(regeom(100, prob=1/100))
barplot(rgeom(100, prob=1/100))
rgeom(100, prob=1/100)
barplot(rgeom(100000, prob=1/100))
hist (rgeom(100000, prob=1/100))
hist(rgeom(100000, prob=1/100), breaks=1000)
hist(rgeom(100000, prob=1/1), breaks=1000)
hist(rgeom(100000, prob=1/1), xlim=c(0,1000), breaks=1000)
hist(rgeom(100000, prob=1/2), xlim=c(0,1000), breaks=1000)
hist(rgeom(100000, prob=1/10000), xlim=c(0,1000), breaks=1000)
hist(rgeom(100000, prob=1/1000), xlim=c(0,1000), breaks=1000)
hist(rgeom(100000, prob=1/10000), xlim=c(0,1000), breaks=1000)
data.frame(year=1976:1985)
data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22))
data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066))
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066))
sum(data$fatal_accidents)
?rgamma
rgamma(1000, 138, 10)
?lapply
thetas <- rgamma(1000, 138, 10)
y1986_func <- function(theta) {
rpois(1, theta)
}
lapply(thetas, y1986_func)
unlist(lapply(thetas, y1986_func))
y1986s <- unlist(lapply(thetas, y1986_func))
?order
order(y1986s)
sort(y1986s)
1:3
1:10
1000*.025
1000*.975
sort(y1986s)[26]
sort(y1986s)[974]
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066))
thetas <- rgamma(1000, 138, 10)
y1986_func <- function(theta) {
rpois(1, theta)
}
y1986s <- unlist(lapply(thetas, y1986_func))
sort(y1986s)[26]
sort(y1986s)[974]
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066))
thetas <- rgamma(1000, 138, 10)
y1986_func <- function(theta) {
rpois(1, theta)
}
y1986s <- unlist(lapply(thetas, y1986_func))
sort(y1986s)[26]
sort(y1986s)[974]
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066))
thetas <- rgamma(1000, 138)/10
y1986_func <- function(theta) {
rpois(1, theta)
}
y1986s <- unlist(lapply(thetas, y1986_func))
sort(y1986s)[26]
sort(y1986s)[974]
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066))
thetas <- rgamma(1000, 138, 10)
y1986_func <- function(theta) {
rpois(1, theta)
}
y1986s <- unlist(lapply(thetas, y1986_func))
sort(y1986s)[25]
sort(y1986s)[976]
rpois(1000, thetas)
y1986s <- rpois(1000, thetas)
sort(y1986s)[25]
sort(y1986s)[976]
10000*.025
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066))
thetas <- rgamma(10000, 138, 10)
y1986_func <- function(theta) {
rpois(1, theta)
}
y1986s <- unlist(lapply(thetas, y1986_func))
sort(y1986s)[250]
sort(y1986s)[9760]
View(data)
thetas <- rgamma(1000,238)/10
y1986s <- rpois(1000,thetas)
print(sort(y1986s)[c(25,976)])
?rpois
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066))
thetas <- rgamma(1000, 138, 10)
y1986_func <- function(theta) {
rpois(1000, theta)
}
y1986s <- unlist(lapply(thetas, y1986_func))
sort(y1986s)[25]
sort(y1986s)[976]
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066))
thetas <- rgamma(1000, 138, 10)
#
# y1986_func <- function(theta) {
#   rpois(1, theta)
# }
#
# y1986s <- unlist(lapply(thetas, y1986_func))
y1986s <- rpois(1000,thetas)
sort(y1986s)[25]
sort(y1986s)[976]
print(sort(y1986s)[c(25,976)])
?rgamma
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066))
thetas <- rgamma(1000, shape=138, rate=10)
#
# y1986_func <- function(theta) {
#   rpois(1, theta)
# }
#
# y1986s <- unlist(lapply(thetas, y1986_func))
y1986s <- rpois(1000,thetas)
sort(y1986s)[25]
sort(y1986s)[976]
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066))
thetas <- rgamma(1000, shape=138, scale=1/10)
#
# y1986_func <- function(theta) {
#   rpois(1, theta)
# }
#
# y1986s <- unlist(lapply(thetas, y1986_func))
y1986s <- rpois(1000,thetas)
sort(y1986s)[25]
sort(y1986s)[976]
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066))
thetas <- rgamma(1000, shape=138, scale=10)
#
# y1986_func <- function(theta) {
#   rpois(1, theta)
# }
#
# y1986s <- unlist(lapply(thetas, y1986_func))
y1986s <- rpois(1000,thetas)
sort(y1986s)[25]
sort(y1986s)[976]
rpois(1,1)
thetas
rpois(1,1614)
?rpois
rpois(1,1/1614)
y1986s
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066))
thetas <- rgamma(1000, 138, 10)
y1986_func <- function(theta) {
rpois(1, theta)
}
y1986s <- unlist(lapply(thetas, y1986_func))
# y1986s <- rpois(1000,thetas)
sort(y1986s)[25]
sort(y1986s)[976]
y1986s
rgamma(1,138,10)
rgamma(1,138,10)
rpois(1,13.86976)
rpois(1,13.87476)
length(y1986s)
rpois(1,1/13.87476)
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066), death_rate=c(.19,.12,.15,.16,.14,.06,.13,.13,.03,.15))
data$passenger_miles <- (data$passenger_deaths/data$death_rate) * 100000000
View(data)
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066), death_rate=c(.19,.12,.15,.16,.14,.06,.13,.13,.03,.15))
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(1000, 138)/10
# function to use with lapply to get random number of fatal
# accidents values from the poisson distribution
y1986_func <- function(theta) {
rpois(1, theta)
}
y1986s <- unlist(lapply(thetas, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[25]
sort(y1986s)[976]
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066), death_rate=c(.19,.12,.15,.16,.14,.06,.13,.13,.03,.15))
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(1000, 138)/10
# function to use with lapply to get random number of fatal
# accidents values from the poisson distribution
y1986_func <- function(theta) {
rpois(1000, theta)
}
y1986s <- unlist(lapply(thetas, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[25]
sort(y1986s)[976]
thetas <- rgamma(1000, 138)/10
thetas
thetas <- rgamma(1000, 138, 10)
thetas
alpha <- 0 + 10*mean(c(24,25,31,31,22,21,26,20,16,22))
beta <- 0 + 10
n <- 10000
theta <- rgamma(n, alpha,beta)
y1986 <- rpois(n,theta)
print (sort(y1986)[c(n*0.025,n*0.976)])
alpha
n <- 10000
theta <- rgamma(n,238,10)
y1986 <- rpois(n,theta)
print (sort(y1986)[c(n*0.025,n*0.976)])
theta <- rgamma(n,238,10)
y1986 <- rpois(n,mean(theta))
print (sort(y1986)[c(n*0.025,n*0.976)])
theta <- rgamma(n,238,10)
y1986 <- rpois(n,mean(theta))
print (sort(y1986)[c(n*0.025,n*0.976)])
theta <- rgamma(n,238,10)
y1986 <- rpois(n,mean(theta))
print (sort(y1986)[c(n*0.025,n*0.976)])
theta <- rgamma(n,238,10)
y1986 <- rpois(n,mean(theta))
print (sort(y1986)[c(n*0.025,n*0.976)])
theta <- rgamma(n,238,10)
y1986 <- rpois(n,mean(theta))
print (sort(y1986)[c(n*0.025,n*0.976)])
theta <- rgamma(n,238,10)
y1986 <- rpois(n,mean(theta))
print (sort(y1986)[c(n*0.025,n*0.976)])
theta <- rgamma(n,238,10)
y1986 <- rpois(n,median(theta))
print (sort(y1986)[c(n*0.025,n*0.976)])
theta <- rgamma(n,238,10)
y1986 <- rpois(n,median(theta))
print (sort(y1986)[c(n*0.025,n*0.976)])
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066), death_rate=c(.19,.12,.15,.16,.14,.06,.13,.13,.03,.15))
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(1000, 138, 10)
# get random number of fatal accidents values from the poisson distribution
y1986s <- rpois(1000,thetas)
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[25]
sort(y1986s)[976]
print (sort(y1986s)[c(n*0.025,n*0.976)])
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066), death_rate=c(.19,.12,.15,.16,.14,.06,.13,.13,.03,.15))
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(1000, 238, 10)
# # get random number of fatal accidents values from the poisson distribution
# y1986s <- rpois(1000,thetas)
# function to use with lapply to get random number of fatal
# accidents values from the poisson distribution
y1986_func <- function(theta) {
rpois(1, theta)
}
y1986s <- unlist(lapply(thetas, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[25]
sort(y1986s)[976]
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066), death_rate=c(.19,.12,.15,.16,.14,.06,.13,.13,.03,.15))
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(10000, 238, 10)
# # get random number of fatal accidents values from the poisson distribution
# y1986s <- rpois(1000,thetas)
# function to use with lapply to get random number of fatal
# accidents values from the poisson distribution
y1986_func <- function(theta) {
rpois(1, theta)
}
y1986s <- unlist(lapply(thetas, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[250]
sort(y1986s)[9760]
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066), death_rate=c(.19,.12,.15,.16,.14,.06,.13,.13,.03,.15))
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(10000, 238, 10)
# # get random number of fatal accidents values from the poisson distribution
y1986s <- rpois(1000,thetas)
# # function to use with lapply to get random number of fatal
# # accidents values from the poisson distribution
# y1986_func <- function(theta) {
#   rpois(1, theta)
# }
y1986s <- unlist(lapply(thetas, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[250]
sort(y1986s)[9760]
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066), death_rate=c(.19,.12,.15,.16,.14,.06,.13,.13,.03,.15))
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(10000, 238, 10)
# function to use with lapply to get random number of fatal
# accidents values from the poisson distribution
y1986_func <- function(theta) {
rpois(1, mean(thetas))
}
y1986s <- unlist(lapply(thetas, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[250]
sort(y1986s)[9760]
sum(data$passenger_miles)
View(data)
data$passenger_miles <- (data$passenger_deaths/data$death_rate) * 100000000
sum(data$passenger_miles)
8e11
8e2
data$passenger_miles <- (data$passenger_deaths/data$death_rate) * 100000000
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(238, sum(data$passenger_miles))
y1986s <- unlist(lapply(thetas*8e11, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[250]
sort(y1986s)[9760]
warnings()
y1986_func <- function(theta) {
rpois(1, theta)
}
y1986s <- unlist(lapply(thetas*8e11, y1986_func))
warnings()
data$passenger_miles <- (data$passenger_deaths/data$death_rate) * 100000000
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(10000, 238, sum(data$passenger_miles))
y1986s <- unlist(lapply(thetas*8e11, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[250]
sort(y1986s)[9760]
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066), death_rate=c(.19,.12,.15,.16,.14,.06,.13,.13,.03,.15))
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(10000, sum(data$passenger_deaths), 10)
# function to use with lapply to get random number of fatal
# accidents values from the poisson distribution
y1986_func <- function(theta) {
rpois(1, theta)
}
y1986s <- unlist(lapply(thetas, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[250]
sort(y1986s)[9760]
data$passenger_miles <- (data$passenger_deaths/data$death_rate) * 100000000
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(10000, sum(data$passenger_deaths), sum(data$passenger_miles))
y1986s <- unlist(lapply(thetas*8e11, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[250]
sort(y1986s)[9760]
plot(data$year, data$fatal_accidents)
plot(data$year, data$fatal_accidents, type="l", col="red")
lines(data$year, data$passenger_miles/1e11, col="blue")
data$passenger_miles/1e11
data$passenger_miles/1e10
data$passenger_miles/5e10
data$passenger_miles/3e10
lines(data$year, data$passenger_miles/3e10, col="blue")
data$passenger_deaths/5
data$passenger_deaths/8
data$passenger_deaths/10
data$passenger_deaths/12
data$passenger_deaths/15
lines(data$year, data$passenger_deaths/15, col="green")
data$passenger_deaths/20
data$passenger_deaths/25
data$passenger_deaths/30
plot(data$year, data$fatal_accidents, type="l", col="red")
lines(data$year, data$passenger_miles/3e10, col="blue")
lines(data$year, data$passenger_deaths/30, col="green")
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066), death_rate=c(.19,.12,.15,.16,.14,.06,.13,.13,.03,.15))
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(10000, sum(data$fatal_accidents), 10)
# function to use with lapply to get random number of fatal
# accidents values from the poisson distribution
y1986_func <- function(theta) {
rpois(1, theta)
}
y1986s <- unlist(lapply(thetas, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[250]
sort(y1986s)[9760]
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066), death_rate=c(.19,.12,.15,.16,.14,.06,.13,.13,.03,.15))
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(10000, sum(data$fatal_accidents), 10)
# function to use with lapply to get random number of fatal
# accidents values from the poisson distribution
y1986_func <- function(theta) {
rpois(1, theta)
}
y1986s <- unlist(lapply(thetas, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[250]
sort(y1986s)[9760]
data$passenger_miles <- (data$passenger_deaths/data$death_rate) * 100000000
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(10000, sum(data$fatal_accidents), sum(data$passenger_miles))
y1986s <- unlist(lapply(thetas*8e11, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[250]
sort(y1986s)[9760]
##############
#### Q1a. ####
##############
data <- data.frame(year=1976:1985, fatal_accidents=c(24,25,31,31,22,21,26,20,16,22), passenger_deaths=c(734,516,754,877,814,362,764,809,223,1066), death_rate=c(.19,.12,.15,.16,.14,.06,.13,.13,.03,.15))
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(10000, sum(data$fatal_accidents), 10)
# function to use with lapply to get random number of fatal
# accidents values from the poisson distribution
y1986_func <- function(theta) {
rpois(1, theta)
}
y1986s <- unlist(lapply(thetas, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[250]
sort(y1986s)[9760]
##############
#### Q1b. ####
##############
data$passenger_miles <- (data$passenger_deaths/data$death_rate) * 100000000
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(10000, sum(data$fatal_accidents), sum(data$passenger_miles))
y1986s <- unlist(lapply(thetas*8e11, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[250]
sort(y1986s)[9760]
##############
#### Q1c. ####
##############
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(10000, sum(data$passenger_deaths), 10)
y1986s <- unlist(lapply(thetas, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[250]
sort(y1986s)[9760]
data$passenger_miles <- (data$passenger_deaths/data$death_rate) * 100000000
# get random theta values from posterior (gamma) distribution
thetas <- rgamma(10000, sum(data$passenger_deaths), sum(data$passenger_miles))
y1986s <- unlist(lapply(thetas*8e11, y1986_func))
# to get the lower and upper bounds of 95% predictive interval
sort(y1986s)[250]
sort(y1986s)[9760]
library(shiny); print(source('MSAN_module4/msan622/labs/4-5-17.R')$value)
print(source('MSAN_module4/msan622/labs/4-5-17.R')$value)
print(source('MSAN_module4/msan622/labs/4-5-17.R')$value)
print(source('MSAN_module4/msan622/labs/4-5-17.R')$value)
print(source('MSAN_module4/msan622/labs/4-5-17.R')$value)
print(source('MSAN_module4/msan622/labs/4-5-17.R')$value)
print(source('MSAN_module4/msan622/labs/4-5-17.R')$value)
shiny::runApp('MSAN_module4/msan622/labs/class-code/intro-shiny/iris-k-means')
runApp('MSAN_module4/msan622/labs/lab-2')
shiny::runApp('MSAN_module4/msan622/Assignments/HW2')
shiny::runApp('MSAN_module4/msan622/Assignments/HW2')
runApp()
runApp('MSAN_module4/msan622/Assignments/HW2')
runApp('MSAN_module4/msan622/labs/class-code/intro-shiny/ggvis-app-1')
install.packages('ggvis')
runApp('MSAN_module4/msan622/labs/class-code/intro-shiny/ggvis-app-1')
?ggvis
ERROR: cannot change working directory
shiny::runGitHub("evelynpeng-hw2", "usfviz", subdir = "")
shiny::runGitHub("evelynpeng-hw2", "usfviz", subdir = "")
shiny::runGitHub("cmchu-hw2", "usfviz")
shiny::runGitHub("cmchu-hw2", "usfviz")
shiny::runGitHub("cmchu-hw2", "usfviz")
shiny::runGitHub(“cmchu-hw2”, “usfviz”)
shiny::runGitHub("cmchu-hw2", "usfviz")
shiny::runGitHub("cmchu-hw3", "usfviz")
install.packages("ggplot2")
shiny::runGitHub('LowerLeftCornerLegends-', 'usfviz', subdir='project-prototype')
shiny::runGitHub('LowerLeftCornerLegends-final', 'usfviz')
shiny::runGitHub("usfviz/MikArda-final", subdir = "")
shiny::runGitHub("usfviz/MikArda-final", subdir = "")
shiny::runGitHub("backyardigans-final", "usfviz")
setwd('~/github_public_repositories/Data_Visualization/Bees/')
